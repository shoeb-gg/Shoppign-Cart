"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Hover", {
  enumerable: true,
  get: function get() {
    return _Hover.default;
  }
});
Object.defineProperty(exports, "Trigger", {
  enumerable: true,
  get: function get() {
    return _Trigger.default;
  }
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _Hover = _interopRequireDefault(require("./lib/Hover"));

var _Trigger = _interopRequireDefault(require("./lib/Trigger"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var propTypes = {
  children: _propTypes.default.array.isRequired,
  options: _propTypes.default.object.isRequired,
  className: _propTypes.default.string
};

function renderItem(item, index) {
  if (item.type.name === 'Trigger' || item.props.type === 'trigger') {
    return _react.default.createElement(_Trigger.default, {
      key: index
    }, item);
  } else if (item.type.name === 'Hover' || item.props.type === 'hover') {
    return _react.default.createElement(_Hover.default, {
      key: index
    }, item);
  }
}

function ReactHover(props) {
  var _useState = (0, _react.useState)({
    display: 'none',
    position: 'absolute'
  }),
      _useState2 = _slicedToArray(_useState, 2),
      hoverComponentStyle = _useState2[0],
      updateHoverComponentStyle = _useState2[1];

  var setVisibility = function setVisibility(flag) {
    var updatedStyles = null;

    if (flag) {
      updatedStyles = _objectSpread({}, hoverComponentStyle, {
        display: 'block'
      });
    } else {
      updatedStyles = _objectSpread({}, hoverComponentStyle, {
        display: 'none'
      });
    }

    updateHoverComponentStyle(updatedStyles);
  };

  var getCursorPos = function getCursorPos(e) {
    var cursorX = e.pageX;
    var cursorY = e.pageY;
    var _props$options = props.options,
        followCursor = _props$options.followCursor,
        shiftX = _props$options.shiftX,
        shiftY = _props$options.shiftY;
    var updatedStyles = null;

    if (!followCursor) {
      return;
    }

    if (isNaN(shiftX)) {
      shiftX = 0;
    }

    if (isNaN(shiftY)) {
      shiftY = 0;
    }

    updatedStyles = _objectSpread({}, hoverComponentStyle, {
      top: cursorY + shiftY,
      left: cursorX + shiftX
    });
    updateHoverComponentStyle(updatedStyles);
  };

  var childrenWithProps = [];
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = props.children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var child = _step.value;

      if (child.props) {
        if (child.type.name === 'Trigger' || child.props.type === 'trigger') {
          childrenWithProps.push(_react.default.cloneElement(child, {
            setVisibility: setVisibility,
            getCursorPos: getCursorPos
          }));
        } else if (child.type.name === 'Hover' || child.props.type === 'hover') {
          childrenWithProps.push(_react.default.cloneElement(child, {
            styles: hoverComponentStyle,
            setVisibility: setVisibility,
            getCursorPos: getCursorPos
          }));
        }
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return _react.default.createElement("div", null, childrenWithProps.map(function (item, index) {
    return renderItem(item, index);
  }));
}

ReactHover.propTypes = propTypes;
var _default = ReactHover;
exports.default = _default;
//# sourceMappingURL=ReactHover.js.map